from data_loader import load_or_download_data
from indicators import add_indicators
from prepare_data import prepare_rsi_data
from hybrid_model import HybridTransformerConvLSTM
from optimize_hyperparams import optimize
from train_model import train_hybrid_model, save_model, load_model
from visualization import plot_predictions_with_future
import json

import os
import torch

if __name__ == "__main__":
    ticker = "EURUSD=X"
    model_path = "saved_models/hybrid_model.pth"
    params_path = "saved_models/best_params.json"

    # 1. üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data, file_path = load_or_download_data(ticker)

    # 2. üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    data = add_indicators(data)

    # 3. üìà –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 1, 2 –∏ 3 —à–∞–≥–∞ –≤–ø–µ—Ä–µ–¥)
    seq_length = 30
    X, y1, y2, y3, scaler = prepare_rsi_data(data, seq_length=seq_length)

    # üîπ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ train/test
    train_size = int(0.8 * len(X))
    X_train, X_test = X[:train_size], X[train_size:]
    y1_train, y1_test = y1[:train_size], y1[train_size:]

    # 4. üß† –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    if os.path.exists(model_path) and os.path.exists(params_path):
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã...")
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        with open(params_path, "r") as f:
            best_params = json.load(f)

        # –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        model = HybridTransformerConvLSTM(
            input_size=1, d_model=64, nhead=4, num_layers=best_params["num_layers"],
            conv_filters=best_params["conv_filters"], hidden_size=best_params["hidden_size"]
        )
        model = load_model(model, model_path)
    else:
        print("üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã...")
        best_params = optimize(X_train, y1_train)

        # –°–æ–∑–¥–∞—ë–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        model = HybridTransformerConvLSTM(
            input_size=1, d_model=64, nhead=4, num_layers=best_params["num_layers"],
            conv_filters=best_params["conv_filters"], hidden_size=best_params["hidden_size"]
        )
        model = train_hybrid_model(model, X_train, y1_train, num_epochs=200,
                                   learning_rate=best_params["learning_rate"], batch_size=best_params["batch_size"])

        params_path = "saved_models/best_params.json"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ best_params –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
        if not best_params:
            raise ValueError("–û—à–∏–±–∫–∞: best_params –ø—É—Å—Ç, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        with open(params_path, "w") as f:
            json.dump(best_params, f, indent=4)

        print(f"‚úÖ –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {params_path}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        save_model(model, model_path)

    # 5. üîç –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
    model.eval()
    with torch.no_grad():
        predictions_t1 = model(X_test).numpy()
        predictions_t2 = model(X_test[:, 1:]).numpy()  # –î–ª—è t+2
        predictions_t3 = model(X_test[:, 2:]).numpy()  # –î–ª—è t+3
        actual = y1_test.numpy()

        # –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        predictions_t1 = scaler.inverse_transform(predictions_t1)
        predictions_t2 = scaler.inverse_transform(predictions_t2)
        predictions_t3 = scaler.inverse_transform(predictions_t3)
        actual = scaler.inverse_transform(actual)

    # 6. üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plot_predictions_with_future(actual, predictions_t1, predictions_t2, predictions_t3, predictions_t1, predictions_t2, predictions_t3)
